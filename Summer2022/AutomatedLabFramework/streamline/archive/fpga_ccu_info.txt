
Each packet comprises 41 bytes.  The bytes are "partitioned"
into 8 chunks of 5 bytes each, one for each counter, with the
last byte reserved for a termination byte (``0xff``, or
``0b11111111``) marking the end of the data packet::

    [5 bytes encoding counter 0]
    [5 bytes encoding counter 1]
    [5 bytes encoding counter 2]
    [5 bytes encoding counter 3]
    [5 bytes encoding counter 4]
    [5 bytes encoding counter 5]
    [5 bytes encoding counter 6]
    [5 bytes encoding counter 7]
    [1 termination byte]

For each counter, the 5 bytes encode some sort of a multi-byte
unsigned integer, little-endian (i.e. least-significant byte
first).  To avoid clashing with termination bytes, only the
first 7 bits of each byte are used (the 8th bit is always a
``0``).  Thus, in total, there are up to 35 bits for storing
each counter value (the original manual claims each counter to
be encoded as a 32-bit number; not sure how that works).  For
example, the counter value ``4321``, with binary
representation ``0b1000011100001``, would be sent as::

    01100001 00100001 00000000 00000000 00000000

The first byte contains the first (i.e. least significant) 7
bits, padded on the left by a delimiting ``0`` bit.  The next
byte contains the next 7 bits, and so on.  Thus the byte-wise
encoding of each counter value forms a base-128
representation, such that, if the bytes were denoted ``b_0``,
``b_1``, ..., ``b_4``, the counter value would be found as::

    b_0 + b_1 * 128 + b_2 * 128^2 + b_3 * 128^3 + b_4 * 128^4.

An example representation of a data packet containing counter
values [2718, 281828, 4, 59045, 235, 360, 2874, 71352] is
(first row highlights delimiter ``0`` bit columns as ``0`` and
actual data bits as ``x``)::

    0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx
    -------- -------- -------- -------- --------
    00011110 00010101 00000000 00000000 00000000
    01100100 00011001 00010001 00000000 00000000
    00000100 00000000 00000000 00000000 00000000
    00100101 01001101 00000011 00000000 00000000
    01101011 00000001 00000000 00000000 00000000
    01101000 00000010 00000000 00000000 00000000
    00111010 00010110 00000000 00000000 00000000
    00111000 00101101 00000100 00000000 00000000 11111111
